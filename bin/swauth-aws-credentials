#!/usr/bin/env python
# Copyright (c) 2010-2011 OpenStack, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import gettext
import ast
from optparse import OptionParser
from sys import argv, exit

from swift.common.bufferedhttp import http_connect_raw as http_connect
from swift.common.utils import urlparse


if __name__ == '__main__':
    gettext.install('swauth', unicode=1)
    parser = OptionParser(
        usage='Usage: %prog [options] <account> <user>')
    parser.add_option('-m', '--method', dest='method', default='get', help='put/get/delete credential')
    parser.add_option('-a', '--aws-access_key', dest='aws_access_key', default='', help='(put/delete) AWS access key')
    parser.add_option('-s', '--aws-secret-access_key', dest='aws_secret_access_key', default='',
                      help='(put/delete) AWS secret access key')
    parser.add_option('-A', '--admin-url', dest='admin_url',
                      default='http://127.0.0.1:8080/auth/', help='The URL to the auth '
                                                                  'subsystem (default: http://127.0.0.1:8080/auth/')
    parser.add_option('-U', '--admin-user', dest='admin_user',
                      default='.super_admin', help='The user with admin rights to add users '
                                                   '(default: .super_admin).')
    parser.add_option('-K', '--admin-key', dest='admin_key',
                      help='The key for the user with admin rights to add users.')
    args = argv[1:]
    if not args:
        args.append('-h')
    (options, args) = parser.parse_args(args)
    if len(args) != 2:
        parser.parse_args(['-h'])
    account, user = args
    parsed = urlparse(options.admin_url)
    if parsed.scheme not in ('http', 'https'):
        raise Exception('Cannot handle protocol scheme %s for url %s' %
                        (parsed.scheme, repr(options.admin_url)))
    parsed_path = parsed.path
    if not parsed_path:
        parsed_path = '/'
    elif parsed_path[-1] != '/':
        parsed_path += '/'

    # Get user info
    path = '%sv2/%s/%s' % (parsed_path, account, user)
    headers = {
        'X-Auth-Admin-User': options.admin_user,
        'X-Auth-Admin-Key': options.admin_key,
        }
    conn = http_connect(parsed.hostname, parsed.port, 'GET', path, headers,
                        ssl=(parsed.scheme == 'https'))
    resp = conn.getresponse()
    if resp.status // 100 != 2:
        exit('Could not get user info: %s %s' % (resp.status, resp.reason))

    info = ast.literal_eval(resp.read())

    if options.method == 'get':
        aws_credentials = info['aws_credentials']
        print 'AWS Credential List'
        for ii in range(len(aws_credentials)):
            aws_access_key, aws_secret_access_key = aws_credentials[ii].split(':')
            print (ii + 1)
            print '\taws_access_key         = %s' % aws_access_key
            print '\taws_secrete_access_key = %s' % aws_secret_access_key
    elif options.method == 'put' or options.method == 'delete':
        password = info['auth'].split(':')[-1]
        path = '%sv2/%s/%s' % (parsed_path, account, user)
        headers = {
            'X-Auth-Admin-User': options.admin_user,
            'X-Auth-Admin-Key': options.admin_key,
            'X-Auth-User-Key': password,
            'X-Auth-AWS-Credential-Method': options.method,
            'X-Auth-AWS-Credential-Access-Key': options.aws_access_key,
            'X-Auth-AWS-Credential-Secret-Access-Key': options.aws_secret_access_key,
            'Content-Length': '0'
        }
        groups = info['groups']
        for g in groups:
            if g['name'] == '.admin':
                headers['X-Auth-User-Admin'] = 'true'
            if g['name'] == '.reseller_admin':
                headers['X-Auth-User-Reseller-Admin'] = 'true'
        conn = http_connect(parsed.hostname, parsed.port, 'PUT', path, headers,
                            ssl=(parsed.scheme == 'https'))
        resp = conn.getresponse()
        if resp.status // 100 != 2:
            exit('User creation failed: %s %s' % (resp.status, resp.reason))
    else:
        raise Exception('Not supported method: %s' % options.method)
